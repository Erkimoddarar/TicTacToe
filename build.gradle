/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'nonni' at '10/26/14 3:57 PM' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
//plugin for code analysis
apply plugin: 'pmd'
mainClassName = "ttt.TicTacToeWeb"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    selenium
    seleniumXvfb
// sourceSet for the classes we want in code coverage report
    codeCov {
	java {
	    srcDir 'src/main/java/ttt'
	    exclude 'TicTacToeWeb.java'
	}
    }
}

jar {
    manifest {
        attributes("Main-Class": "ttt.TicTacToeWeb")
    } 
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time

    //Jorundur: added hamcrest for unit testing
    compile 'org.hamcrest:hamcrest-core:1.3'

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'com.sparkjava:spark-core:1.1.1'
    testCompile 'junit:junit:4.11'

    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}


task codeCov( type: Test, dependsOn: cleanTest ) {
    jacoco {
        destinationFile = file( "$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
    testClassesDir = sourceSets.codeCov.output.classesDir
    classpath = sourceSets.codeCov.runtimeClasspath
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.codeCov.allJava.srcDirs)
}

jacocoTestReport.doFirst{
    classDirectories = files('build/classes/codeCov/ttt')
}

task stage { 
    dependsOn installApp 
}

task selenium(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    doFirst {
        switch(ant.properties.os) {
            case 'unix':
                'build/install/TicTacToe/bin/TicTacToe &'.execute()
                break
            case 'windows':
                'build\\install\\TicTacToe\\bin\\TicTacToe.bat'.execute()
                break
        }
    }
}

task seleniumXvfb(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'bin/xvfb start'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
    }
    
    doLast {
        'bin/xvfb stop'.execute()
    }
}
pmd {
  reportsDir = file('build/reports/pmd/html')
  ignoreFailures = true
  ruleSets = [
            'java-android',
        'java-basic',
        'java-braces',
        'java-clone',
        'java-coupling',
        'java-codesize',
        'java-design',
        'java-empty',
        'java-finalizers',
        'java-imports',
        'java-j2ee',
        'java-junit',
        'java-logging-jakarta-commons',
        'java-logging-java',
        'java-migrating',
        'java-optimizations',
        'java-strictexception',
        'java-strings',
        'java-typeresolution',
        'java-unnecessary',
        'java-unusedcode'
  ]
}

test.finalizedBy codeCov
codeCov.finalizedBy jacocoTestReport
